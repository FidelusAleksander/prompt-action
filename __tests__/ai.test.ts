import { generateAIResponse } from "../src/ai";
import { OpenAI } from "openai";

// Mock the OpenAI module
jest.mock("openai");

describe("generateAIResponse", () => {
  const mockToken = "test-token";
  const mockModel = "gpt-4";
  const mockPrompt = "test prompt";

  let mockCreate: jest.Mock;

  beforeEach(() => {
    mockCreate = jest.fn();
    (OpenAI as unknown as jest.Mock).mockImplementation(() => ({
      chat: {
        completions: {
          create: mockCreate,
        },
      },
    }));
  });

  it("should generate an AI response successfully", async () => {
    const mockResponse = "Test response";
    const mockUsage = {
      prompt_tokens: 10,
      completion_tokens: 20,
      total_tokens: 30
    };
    mockCreate.mockResolvedValueOnce({
      choices: [{ message: { content: mockResponse } }],
      usage: mockUsage,
    });

    const response = await generateAIResponse(mockPrompt, mockModel, mockToken);

    expect(response.text).toBe(mockResponse);
    expect(response.usage).toEqual(mockUsage);
    expect(OpenAI).toHaveBeenCalledWith({
      baseURL: "https://models.inference.ai.azure.com",
      apiKey: mockToken,
    });
  });

  it("should throw an error when no response is generated", async () => {
    mockCreate.mockResolvedValueOnce({
      choices: [{ message: { content: null } }],
    });

    await expect(
      generateAIResponse(mockPrompt, mockModel, mockToken),
    ).rejects.toThrow("No response was generated by the AI model");
  });

  it("should handle API errors properly", async () => {
    const errorMessage = "API Error";
    mockCreate.mockRejectedValueOnce(new Error(errorMessage));

    await expect(
      generateAIResponse(mockPrompt, mockModel, mockToken),
    ).rejects.toThrow(`Failed to generate AI response: ${errorMessage}`);
  });

  it("should handle undefined message", async () => {
    mockCreate.mockResolvedValueOnce({
      choices: [{ message: undefined }],
    });

    await expect(
      generateAIResponse(mockPrompt, mockModel, mockToken),
    ).rejects.toThrow("No response was generated by the AI model");
  });

  it("should handle empty choices array", async () => {
    mockCreate.mockResolvedValueOnce({
      choices: [],
    });

    await expect(
      generateAIResponse(mockPrompt, mockModel, mockToken),
    ).rejects.toThrow("No response was generated by the AI model");
  });

  it("should handle response without usage information", async () => {
    const mockResponse = "Test response";
    mockCreate.mockResolvedValueOnce({
      choices: [{ message: { content: mockResponse } }],
      // No usage field provided
    });

    const response = await generateAIResponse(mockPrompt, mockModel, mockToken);

    expect(response.text).toBe(mockResponse);
    expect(response.usage).toBeUndefined();
  });
});
